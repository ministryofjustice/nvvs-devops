---
owner_slack: "#nvvs-devops"
title: Re-configure AWS Vault
last_reviewed_on: 2023-03-20
review_in: 3 month
---

# Configure AWS Vault

Follow this guide to re-configure your [AWS Vault](https://github.com/99designs/aws-vault) to work with [AWS SSO](https://aws.amazon.com/single-sign-on/).  

> **Note:**  
>
> This guide is for re-configuring AWS Vault running on **Ubuntu**.  

## Prerequisites

To be able to follow this guide to setup the AWS SSO, you need to have the following already:  

- [GPG](https://gnupg.org/index.html) installed.  
- [AWS Vault](https://github.com/99designs/aws-vault#installing) set up.  
- Access to [Moj AWS SSO](https://moj.awsapps.com/start#/).  

## Generate a GPG key  

We will need a GPG key to encrypt credentials in a password store later. So, let's start by generating a GPG key. Run the following command:  

`gpg --full-generate-key`  

Press `Enter` for `Please select what kind of key you want:`, to select the default value.  

Press `Enter` again for `What keysize do you want? (3072)`, to select the given size.  

Press `Enter` again for `Key is valid for? (0)`, to set the key to never expire.  

Confirm this by typing `Y` for `Is this correct? (y/N)` in next step and then press `Enter`.  

Provide a ID for the key in the next step as below:  

Type `<your username> Password Storage Key` for `Real name:`  

You may leave `Email address:` and `Comment:` blank.  

Finally, confirm all by typing `O` to accept Okay.  

It will prompt for a `Passphrase`. Create a new passphrase to protect the GPG key.  

A new GPG key is now created.  

## Export GPG_TTY variable  

If you do not already have, add the below in your `.bashrc` or `.zshrc` file:  

````  
# gpg  
export GPG_TTY=$(tty)  
```` 

## Install and initialise pass

We will use [pass](https://www.passwordstore.org/) as the `backend` for `aws-vault` later. So, let's install it.  

### Install  

Run the below command:  

`sudo apt-get install pass` 

### Setting it up  

To begin, run the following command:  

`pass init "<your username> Password Storage Key"`  

Here, `<your username> Password Storage Key` is the ID of the GPG key that you created in the previous step.  

A new Password Store is now created in `~/.password-store`.  

## Finally, update the config file

Add to / replace with the below, your `~/.aws/config` file and save.  

````
[default]  
region=eu-west-2  
output=json  
 
[profile mojo-shared-services]  
sso_start_url = https://moj.awsapps.com/start  
sso_region = eu-west-2  
sso_account_id = <shared services AWS account ID>  
sso_role_name = AdministratorAccess  
region = eu-west-2  
output = json  

[profile mojo-development]  
sso_start_url = https://moj.awsapps.com/start  
sso_region = eu-west-2  
sso_account_id = <development AWS account ID>   
sso_role_name = AdministratorAccess  
region = eu-west-2  
output = json  

[profile mojo-pre-production]  
sso_start_url = https://moj.awsapps.com/start  
sso_region = eu-west-2  
sso_account_id = <pre production AWS account ID>   
sso_role_name = AdministratorAccess  
region = eu-west-2  
output = json  

[profile mojo-production]  
sso_start_url = https://moj.awsapps.com/start  
sso_region = eu-west-2  
sso_account_id = <production AWS account ID>   
sso_role_name = AdministratorAccess  
region = eu-west-2  
output = json  

[profile mojo-shared-services-cli]  
region = eu-west-2  
credential_process = /usr/local/bin/aws-vault exec mojo-shared-services --json --backend=pass --prompt=pass  

[profile mojo-development-cli]  
credential_process = /usr/local/bin/aws-vault exec mojo-development --json --backend=pass --prompt=pass  

[profile mojo-pre-production-cli]  
credential_process = /usr/local/bin/aws-vault exec mojo-pre-production --json --backend=pass --prompt=pass  

[profile mojo-production-cli]  
credential_process = /usr/local/bin/aws-vault exec mojo-production --json --backend=pass --prompt=pass  
````  

## Test your AWS Cli  

Run the below, to set the `AWS_PROFILE` to use the shared services account:  

`export AWS_PROFILE=mojo-shared-services-cli`  

Then, run the below aws command:  

`aws sts get-caller-identity`  

When prompted, provide the passphrase for GPG key you created earlier.  

You will then see web page on your browser to authorise a request:  

![AWS SSO authorisation prompt](images/aws_sso_auth_prompt.png)  

Click `Allow`.  

You should see the below in the terminal:

````
{  
    "UserId": "<your username>@digital.justice.gov.uk",  
    "Account": "<shared services AWS account id>",  
    "Arn": "arn:aws:sts::<shared services AWS account id>:assumed-role/<your username>@digital.justice.gov.uk"  
}  
````  

Congratulations, you have successfully configured your AWS Vault to work with AWS SSO.

In order for the SSO to work you wil need access to MOJ gihub org. Please contact Ops-Engineering team slack channel [here](https://join.slack.com/share/enQtNTMyODc1MDM1MTc4My1kMGI3YjRhMjZhZmJjOGZjZmY2ZGNmMWY0MWEzOGJiMGJkOTdlODBkOTQzNTVlYzZiNWI1M2MyYzI4NjA4ZTU1) with your github handle once that is completed, also request member of the team to add you to github teams in this [repo](https://github.com/ministryofjustice/staff-technology-services-github-teams)

## Forgotten GPG Key Password

In the event you forget the password of your GPG Key you will need to delete it and create another. 

List the key. You will need the string under 'pub' later.

```
username@laptop:~$ gpg -k
/home/username/.gnupg/pubring.kbx
-----------------------------------
pub   rsa3072 2021-11-19 [SC]
      DDE8C445795E88ABB4CBCE49C3F2562BD
uid           [ultimate] Gyour username> Password Storage Key
sub   rsa3072 2021-11-19 [E]
```

Now delete the secret key:

```
username@laptop:~$ gpg  --delete-secret-keys DDE8C445795E88ABB4CBCE49C3F2562BD
gpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


sec  rsa3072/C3F2562BD768D6DC 2021-11-19 <your username> Password Storage Key

Delete this key from the keyring? (y/N) y
This is a secret key! - really delete? (y/N) y
```

Now delete the key itself: 

```
username@laptop:~$ gpg  --delete-keys DDE8C445795E88ABB4CBCE49C3F2562BD
gpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


pub  rsa3072/C3F2562BD768D6DC 2021-11-19 <your username> Password Storage Key

Delete this key from the keyring? (y/N) y

### You can now check the key has been deleted with the following command
```

Confirm the key has been deleted with the following command:

```
username@laptop:~$ gpg -k
gpg: checking the trustdb
gpg: no ultimately trusted keys found
```

Now you must generate a new GPG Key as per the documentation above. 

### 